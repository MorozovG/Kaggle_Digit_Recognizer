{
    "contents" : "# загружаем данные\nlibrary(readr)\ndata_train <- read_csv(\"train.csv\")\ndata_test <- read_csv(\"test.csv\")\ndata_train$label <- as.factor(data_train$label)\nrequire(magrittr)\nrequire(dplyr)\nrequire(caret)\n\n# Рисуем цифры\ncolors<-c('white','black')\ncus_col<-colorRampPalette(colors=colors)\n\ndefault_par <- par()\npar(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')\nfor(i in 1:36)\n{\n        z<-array(train[i,-1],dim=c(28,28))\n        z<-z[,28:1] ##right side up\n        image(1:28,1:28,z,main=train[i,1],col=cus_col(256))\n        print(i)\n}\npar(default_par)\n\n# разделяем на выборки\nset.seed(111)\nsplit <- createDataPartition(data_train$label, p = 0.6, list = FALSE)\ntrain <- slice(data_train, split)\ntest <- slice(data_train, -split)\n\nlibrary(rpart)\n# удаляем признаки с нулевой вариацией и сравниваем модели\nzero_var_col <- nearZeroVar(train, saveMetrics = T, freqCut = 99/1)\ntrain_nzv <- train[, !zero_var_col$nzv]\ntest_nzv <- test[, !zero_var_col$nzv]\nmodel_tree2 <- rpart(label ~ ., data = train, method=\"class\" )\npredict_data_test2 <- predict(model_tree2, newdata = test, type = \"class\")\nmodel_tree <- rpart(label ~ ., data = train_nzv, method=\"class\" )\npredict_data_test <- predict(model_tree, newdata = test_nzv, type = \"class\")\nsum(test_nzv$label != predict_data_test)/nrow(test_nzv)\n\ntrain <- train[, !zero_var_col$nzv]\ntest <- test[, !zero_var_col$nzv]\n\n\n\n# рисуем learning curve\nlearn_curve_data <- data.frame(integer(),\n                               double(),\n                               double())\nfor (n in 1:5 )\n{\n        for (i in seq(1, 2000, by = 200))\n        {\n                train_learn <- train[sample(nrow(train), size = i),]\n                test_learn <- test[sample(nrow(test), size = i),]\n                model_tree_learn <- rpart(label ~ ., data = train_learn, method=\"class\" )\n                predict_train_learn <- predict(model_tree_learn, type = \"class\")\n                error_rate_train_rpart <- sum(train_learn$label != predict_train_learn)/i\n                predict_test_learn <- predict(model_tree_learn, newdata = test_learn, type = \"class\")\n                error_rate_test_rpart <- sum(test_learn$label != predict_test_learn)/i\n                learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train_rpart, error_rate_test_rpart))\n        }\n}\n\n\n# рисуем кривую\ncolnames(learn_curve_data) <- c(\"Size\", \"Train_Error_Rate\", \"Test_Error_Rate\")\nlearn_curve_data_long <- melt(learn_curve_data, id = \"Size\")\nggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = \"gam\", formula = y ~ s(x), size = 1)\nggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_line()\nggplot(data = learn_curve_data, aes(Size)) + geom_line(aes(y = Train_Error_Rate)) + geom_line(aes(y = Test_Error_Rate))\n\n# 0.63700 Простое дерево загрузка данных на сайт  удалить zero-var\nmodel_tree <- rpart(label ~ ., data = train, method=\"class\" )\npredict_data_test <- predict(model_tree, newdata = data_test, type = \"class\")\npredictions <- data.frame(ImageId=1:nrow(data_test), Label=levels(predict_data_test)[predict_data_test])\nwrite_csv(predictions, \"submission.csv\")\n\n\nlearn_curve_data <- data.frame(integer(),\n                               double(),\n                               double())\n\nfor (n in 1:5 )\n{\n        for (i in seq(100, 3100, by = 500))\n        {\n                train_learn <- train[sample(nrow(train), size = i),]\n                test_learn <- test[sample(nrow(test), size = i),]\n                model_learn <- randomForest(label ~ ., data = train_learn)\n                predict_train_learn <- predict(model_learn)\n                error_rate_train <- sum(train_learn$label != predict_train_learn)/i\n                predict_test_learn <- predict(model_learn, newdata = test_learn)\n                error_rate_test <- sum(test_learn$label != predict_test_learn)/i\n                learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))\n        }\n}\nrf_model <- train(label ~ ., data = train, method = \"rf\")\n\nf <- as.formula(paste('lable ~', paste(names(train_nn)[!n %in% 'y'], collapse = ' + ')))\n\n\nset.seed(100)\ntrain_1000 <- data_train[sample(nrow(data_train), size = 1000),]\ncolors<-c('white','black')\ncus_col<-colorRampPalette(colors=colors)\n\ndefault_par <- par()\n\nnumber_row <- 28\nnumber_col <- 28\npar(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')\nfor(i in 1:36)\n{\n        z<-array(as.matrix(train_1000)[i,-1],dim=c(number_row,number_col))\n        z<-z[,number_col:1] \n        image(1:number_row,1:number_col,z,main=train_1000[i,1],col=cus_col(256))\n}\npar(default_par)\n\nzero_var_col <- nearZeroVar(train_1000, saveMetrics = T)\ntrain_1000_cut <- train_1000[, !zero_var_col$nzv]\n\ntest <- data.frame(matrix(NA, nrow = 1000, ncol = ncol(train_1000)))\nzero_col_number <- 1\nfor (i in 1:ncol(train_1000)) {\n        if (zero_var_col$nzv[i] == F) {\n                test[, i] <- restr[, zero_col_number]\n                zero_col_number <- zero_col_number + 1\n        }\n        else test[, i] <- train_1000[, i]\n}\n\npc <- princomp(train_1000[, -1], cor=TRUE, scores=TRUE)\npca <- prcomp(train_1000_cut[, -1], center = TRUE, scale = TRUE)\n\nrestr <- pca$x[,1:70] %*% t(pca$rotation[,1:70])\n\nif(pca$scale != FALSE){\n        restr <- scale(restr, center = FALSE , scale=1/pca$scale)\n}\nif(all(pca$center != FALSE)){\n        restr <- scale(restr, center = -1 * pca$center, scale=FALSE)\n}\n\npar(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')\nfor(i in 1:36)\n{\n        z<-array(as.matrix(test)[i,-1],dim=c(number_row,number_col))\n        z<-z[,number_col:1] \n        image(1:number_row,1:number_col,z,main=test[i,1],col=cus_col(256))\n}\npar(default_par)\n",
    "created" : 1439920660486.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3338859470",
    "id" : "33766E6",
    "lastKnownWriteTime" : 1441219061,
    "path" : "G:/R lang/Kaggle_Digit_Recognizer/DRCode.R",
    "project_path" : "DRCode.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}