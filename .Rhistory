zero_var_pred <- nearZeroVar(train, saveMetrics = T)
zero_var_pred
zero_var_pred2 <- nearZeroVar(train, saveMetrics = T, freqCut = 100/0)
length(zero_var_pred2)
zero_var_pred2
zero_var_pred2$zeroVar
sum(zero_var_pred2$zeroVar)
sum(zero_var_pred$zeroVar)
sum(zero_var_pred$nzv)
sum(zero_var_pred2$nzv)
zero_var_pred3 <- nearZeroVar(train, saveMetrics = T, freqCut = 99/1)
sum(zero_var_pred3$nzv)
sum(zero_var_pred3$zeroVar)
train_nzv <- train[, - zero_var_pred3$nzv]
train_nzv <- train[, -zero_var_pred3$nzv]
zero_var_pred3$nzv
train_nzv <- train[, -(1:3)]
train_nzv <- train[, -zero_var_pred3$nzv]
class(zero_var_pred3$nzv)
train_nzv <- train[, !zero_var_pred3$nzv]
test_nzv <- test[, !zero_var_pred3$nzv]
model_tree <- rpart(label ~ ., data = train_nzv, method="class" )
predict_data_test <- predict(model_tree, newdata = test_nzv, type = "class")
sum(test_nzv$label != predict_data_test)/nrow(test_nzv)
model_tree2 <- rpart(label ~ ., data = train, method="class" )
predict_data_test2 <- predict(model_tree2, newdata = test, type = "class")
sum(test$label != predict_data_test2)/nrow(test)
rm(list = ls())
data_train <- read_csv("train.csv")
data_train$label <- as.factor(data_train$label)
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T, freqCut = 99/1)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
for (i in seq(1, 2000, by = 200))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- train(label ~ ., data = train_learn, method = "rf")
predict_train_learn <- predict(model_learn, type = "class")
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn, type = "class")
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train_rpart, error_rate_test_rpart))
}
learn_curve_data <- data.frame(integer(),
double(),
double())
train_learn <- train[sample(nrow(train), size = 1),]
test_learn <- test[sample(nrow(test), size = 1),]
model_learn <- train(label ~ ., data = train_learn, method = "rf")
train_learn <- train[sample(nrow(train), size = 2),]
test_learn <- test[sample(nrow(test), size = 2),]
model_learn <- train(label ~ ., data = train_learn, method = "rf")
rf_model <- train(label ~ ., data = train, method = "rf")
model_learn <- train(label ~ ., data = train[sample(nrow(train), size = 2),], method = "rf")
model_learn <- train(label ~ ., data = train[sample(nrow(train), size = 10),], method = "rf")
model_learn <- train(label ~ ., data = train[sample(nrow(train), size = 500),], method = "rf")
dim(train[sample(nrow(train), size = 500),])
model_learn2 <- randomForest(label ~ ., data = train[sample(nrow(train), size = 500),], do.trace=TRUE)
learn_curve_data <- data.frame(integer(),
double(),
double())
for (i in seq(500, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn, size = i)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train_rpart, error_rate_test_rpart))
}
learn_curve_data <- data.frame(integer(),
double(),
double())
for (i in seq(500, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn, size = i)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 500),])
learn_curve_data <- data.frame(integer(),
double(),
double())
for (i in seq(500, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 100),])
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 1),])
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 10),])
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 100),])
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
# рисуем кривую
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 10100, by = 1000))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
model_learn <- randomForest(label ~ ., data = train[sample(nrow(train), size = 10000),])
learn_curve_data <- data.frame(integer(),
double(),
double())
rm(list = ls())
data_train <- read_csv("train.csv")
data_train$label <- as.factor(data_train$label)
colors<-c('white','black')
cus_col<-colorRampPalette(colors=colors)
default_par <- par()
par(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for(i in 1:36)
{
z<-array(data_train[i,-1],dim=c(28,28))
z<-z[,28:1] ##right side up
image(1:28,1:28,z,main=data_train[i,1],col=cus_col(256))
print(i)
}
data_train <- read_csv("train.csv")
colors<-c('white','black')
cus_col<-colorRampPalette(colors=colors)
default_par <- par()
par(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for(i in 1:36)
{
z<-array(data_train[i,-1],dim=c(28,28))
z<-z[,28:1] ##right side up
image(1:28,1:28,z,main=data_train[i,1],col=cus_col(256))
print(i)
}
z<-array(data_train[i,-1],dim=c(28,28))
z<-z[,28:1] ##right side up
image(1:28,1:28,z,main=data_train[i,1],col=cus_col(256))
z
z<-array(data_train[i,-1],dim=c(28,28))
z
colors<-c('white','black')
cus_col<-colorRampPalette(colors=colors)
default_par <- par()
par(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for(i in 1:36)
{
z<-array(as.matrix(data_train)[i,-1],dim=c(28,28))
z<-z[,28:1] ##right side up
image(1:28,1:28,z,main=data_train[i,1],col=cus_col(256))
print(i)
}
par(default_par)
```
rm(list = ls())
warnings()
data_train <- read_csv("train.csv")
data_train$label <- as.factor(data_train$label)
# Рисуем цифры
colors<-c('white','black')
cus_col<-colorRampPalette(colors=colors)
default_par <- par()
par(mfrow=c(6,6),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
for(i in 1:36)
{
z<-array(as.matrix(data_train)[i,-1],dim=c(28,28))
z<-z[,28:1] ##right side up
image(1:28,1:28,z,main=data_train[i,1],col=cus_col(256))
print(i)
}
par(default_par)
test <- test[, !zero_var_col$nzv]
rm(list = ls())
data_train <- read_csv("train.csv")
data_train$label <- as.factor(data_train$label)
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
for (i in seq(100, 3100, by = 500))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
learn_curve_data <- data.frame(integer(),
double(),
double())
for (i in seq(100, 3100, by = 500))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) +
geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_line()
learn_curve_data_long
for (n in 1:5 )
{
for (i in seq(100, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_tree_learn <- rpart(label ~ ., data = train_learn, method="class" )
predict_train_learn <- predict(model_tree_learn, type = "class")
error_rate_train_rpart <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_tree_learn, newdata = test_learn, type = "class")
error_rate_test_rpart <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train_rpart, error_rate_test_rpart))
}
}
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 1000, by = 100))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point()
ggplot(data=learn_curve_data_long, aes(x=Size, y=value)) + geom_point()
library(ggplot2)
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point()
par()
dev.off()
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 3000, by = 500))
{
train_learn <- train[sample(nrow(train), size = i),]
test_learn <- test[sample(nrow(test), size = i),]
model_learn <- randomForest(label ~ ., data = train_learn)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
learn_curve_data
model_train_rf <- randomForest(label ~ ., data = train)
model_train_rf <- randomForest(label ~ ., data = train[sample(nrow(train), size = 20000),])
model_train_rf <- randomForest(label ~ ., data = train[sample(nrow(train), size = 15000),])
model_train_rf <- randomForest(label ~ ., data = train[sample(nrow(train), size = 10000),])
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) + geom_point() + stat_smooth()
model_train_rf <- randomForest(label ~ ., data = train)
model_train_rf <- randomForest(label ~ ., data = train[sample(nrow(train), size = 20000),])
model_train_rf <- randomForest(label ~ ., data = train[sample(nrow(train), size = 15000),])
library("e1071", lib.loc="C:/Program Files/R/R-3.2.1/library")
scale_model <- preProcess(train, method = c("center", "scale"))
scale_model <- preProcess(train[, -1], method = c("center", "scale"))
head(scale_model)
train_scale <- predict(scale_model, train)
train_scale <- predict(scale_model, train[, -1])
train_scale <- cbind(train[, 1], train_scale)
model_train_svm <- svm(label ~ ., data = train_scale, kernel = "radial")
test_scale <- predict(scale_model, test[, -1])
test_scale <- cbind(train[, 1], test_scale)
test_scale <- predict(scale_model, test[, -1])
test_scale <- cbind(test[, 1], test_scale)
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(100, 1000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial")
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
for (n in 1:5 )
{
for (i in seq(1, 1000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial")
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
for (n in 1:5 )
{
for (i in seq(10, 1000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial")
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
for (n in 1:5 )
{
for (i in seq(10, 1000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial", scale = F)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(10, 1000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial", scale = F)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) +
geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
learn_curve_data
learn_curve_data <- data.frame(integer(),
double(),
double())
for (n in 1:5 )
{
for (i in seq(10, 2000, by = 100))
{
train_learn <- train_scale[sample(nrow(train_scale), size = i),]
test_learn <- test_scale[sample(nrow(test_scale), size = i),]
model_learn <- svm(label ~ ., data = train_learn, kernel = "radial", scale = F)
predict_train_learn <- predict(model_learn)
error_rate_train <- sum(train_learn$label != predict_train_learn)/i
predict_test_learn <- predict(model_learn, newdata = test_learn)
error_rate_test <- sum(test_learn$label != predict_test_learn)/i
learn_curve_data <- rbind(learn_curve_data, c(i, error_rate_train, error_rate_test))
}
}
colnames(learn_curve_data) <- c("Size", "Train_Error_Rate", "Test_Error_Rate")
learn_curve_data_long <- melt(learn_curve_data, id = "Size")
ggplot(data=learn_curve_data_long, aes(x=Size, y=value, colour=variable)) +
geom_point() + stat_smooth(method = "gam", formula = y ~ s(x), size = 1)
install.packages('neuralnet')
library("neuralnet")
model_nn <- neuralnet(label ~ ., data = train, hidden = 50)
as.data.frame(runif(50, min=0, max=100))
?neuralnet
train_nn_predictors <- train[sample(nrow(train), size = 1000),-1]
train_nn <- train[sample(nrow(train), size = 1000),]
train_nn_predictors <- train_nn[, -1]
train_nn_outcom <- train_nn[, 1]
model_nn <- train(train_nn_predictors, train_nn_outcom, size = c(5,5))
model_nn <- train(train_nn_predictors, train_nn_outcom, size = 5)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 5)
install.packages("nnet")
install.packages("nnet")
library(nnet)
install.packages("nnet")
library(nnet)
install.packages("nnet")
library(nnet)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 5)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 5, MaxNWts = 2000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 5, MaxNWts = 2000, softmax = T)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 20, MaxNWts = 2000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 20, MaxNWts = 10000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 200, MaxNWts = 10000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 200, MaxNWts = 100000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 100, MaxNWts = 100000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 500, MaxNWts = 100000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000)
train_nn <- train_scale[sample(nrow(train), size = 1000),]
train_nn_predictors <- train_nn[, -1]
train_nn_outcom <- train_nn[, 1]
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000)
model_nn <- avNNet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000)
library(caret)
model_nn <- avNNet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 50, MaxNWts = 100000, linout = FALSE)
model_nn <- nnet(train_nn_predictors, train_nn_outcom, size = 10, MaxNWts = 100000)
class(train_nn_outcom)
str(train_nn_outcom)
library("parallel", lib.loc="C:/Program Files/R/R-3.2.1/library")
library("neuralnet", lib.loc="C:/Program Files/R/R-3.2.1/library")
detach("package:parallel", unload=TRUE)
model_nn <- neuralnet(train_nn_predictors, train_nn_outcom, hidden = 10)
train_nn <- train_scale[sample(nrow(train_scale), size = 1000),]
train_nn_predictors <- train_nn[, -1]
train_nn_outcom <- train_nn[, 1]
f <- as.formula(paste('lable ~', paste(names(train_nn)[!names(train_nn) %in% 'lable'], collapse = ' + ')))
f <- as.formula(paste('label ~', paste(names(train_nn)[!names(train_nn) %in% 'label'], collapse = ' + ')))
model_nn <- neuralnet(f, train_nn, hidden = 10)
