qplot(data = cumvar)
head(as.data.frame(cumvar)
)
ggplot(data = as.data.frame(cumvar), aes(cumvar)) + geom_bar(stat = "identity")
ggplot(data = as.data.frame(y = cumvar), aes(cumvar)) + geom_bar(stat = "identity")
cumvar <- data.frame(PC = row.names(cumvar), CumVar = cumvar)
row.names(cumvar)
cumvar <- data.frame(PC = 1:299, CumVar = cumvar)
head(cumvar)
ggplot(data = cumvar, aes(x = PC, y = cumvar)) + geom_bar(stat = "identity")
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_bar(stat = "identity")
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_area()
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_point()
ggplot(data = cumvar[1:10,], aes(x = PC, y = CumVar)) + geom_bar(stat = "identity")
variance <- data.frame(PC = 1:299, Var = variance)
head(variance)
ggplot(data = variance[1:10,], aes(x = PC, y = Var)) + geom_bar(stat = "identity")
variance <- data.frame(PC = 1:299, Var = variance*100)
ggplot(data = variance[1:10,], aes(x = PC, y = Var)) + geom_bar(stat = "identity")
variance <- pr.out$sdev^2/sum(pr.out$sdev^2)
variance <- data.frame(PC = 1:299, Var = variance*100)
ggplot(data = variance[1:10,], aes(x = PC, y = Var)) + geom_bar(stat = "identity")
print(g)
ggplot(data = variance[1:10,], aes(x = factor(PC), y = Var)) + geom_bar(stat = "identity")
pc <- princomp(train_nzv[, -1], cor=TRUE, scores=TRUE)
plot(pc,type="lines")
print(g)
variance <- pr.out$sdev^2/sum(pr.out$sdev^2)
sum(variance[1:70])
library(readr)
library(caret)
data_train <- read_csv("train.csv")
data_train$label <- as.factor(data_train$label)
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
library(dplyr)
train <- slice(data_train, split)
test <- slice(data_train, -split)
rm(list = ls())
data_train <- read_csv("train.csv")
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- data_train[sample(nrow(data_train), size = 1000),]
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train_nzv <- train[, !zero_var_col$nzv]
preProc <- preProcess(x = train[,-1], method = c("center", "scale", "pca"))
preProc <- preProcess(x = train_nzv[,-1], method = c("center", "scale", "pca"))
names(preProc)
plot(preProc,type="lines")
variance <- preProc$std^2/sum(preProc$std^2)
variance <- data.frame(PC = 1:299, Var = variance*100)
variance <- data.frame(PC = 1:297, Var = variance*100)
ggplot(data = variance[1:10,], aes(x = factor(PC), y = Var)) + geom_bar(stat = "identity")
cumvar <- cumsum(variance)
cumvar <- data.frame(PC = 1:297, CumVar = cumvar)
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_point()
variance <- preProc$std^2/sum(preProc$std^2)
cumvar <- cumsum(variance)
cumvar <- data.frame(PC = 1:297, CumVar = cumvar)
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_point()
rm(list = ls())
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
sum(zero_var_col$nzv)
train_nzv <- train[, !zero_var_col$nzv]
test_nzv <- test[, !zero_var_col$nzv]
rm(train)
rm(test)
pr.out=prcomp(train_nzv[, -1], scale=TRUE, center = T)
head(pr.out$x)
train_pca <- predict(pr.out)
head(train_pca)
dim(train_pca)
train <- cbind(train_nzv$label, train_pca)
dim(train)
train <- as.data.frame(cbind(train_nzv$label, train_pca))
train <- as.data.frame(train_nzv$label, train_pca)
train <- as.data.frame(label = train_nzv$label, train_pca)
dim(train)
train <- as.data.frame(cbind(train_nzv$label, train_pca))
names(train$V1) <- label
names(train$V1) <- "label"
colnames(train)[1]<- "label"
train <- train[, 1:91]
train <- train[, 1:71]
sum(variance[1:70])
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(label ~ ., data = train, method = "knn", trControl = ctrl,tuneLength = 20)
rm(list = ls())
library(readr)
library(caret)
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
library(dplyr)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train_nzv <- train[, !zero_var_col$nzv]
test_nzv <- test[, !zero_var_col$nzv]
rm(train)
rm(test)
pr.out=prcomp(train_nzv[, -1], scale=TRUE, center = T)
train_pca <- predict(pr.out)
train <- as.data.frame(cbind(train_nzv$label, train_pca))
colnames(train)[1]<- "label"
train <- train[, 1:71]
train_1000 <- train[sample(nrow(train), size = 1000),]
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(label ~ ., data = train_1000, method = "knn", trControl = ctrl,tuneLength = 20)
knnFit
head(str(train))
train <- as.data.frame(cbind(factor(train_nzv$label), train_pca))
colnames(train)[1]<- "label"
train <- train[, 1:71]
head(str(train))
train <- as.data.frame(cbind(factor(train_nzv$label), train_pca))
colnames(train)[1]<- "label"
train <- train[, 1:71]
head(str(train))
train <- as.data.frame(cbind(train_nzv$label, train_pca))
str(train)
colnames(train)[1]<- "label"
train$label <- as.factor(train$label)
str(train)
train <- train[, 1:71]
train_1000 <- train[sample(nrow(train), size = 1000),]
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(label ~ ., data = train_1000, method = "knn", trControl = ctrl,tuneLength = 20)
knnFit
train_5000 <- train[sample(nrow(train), size = 5000),]
grid <- expand.grid(k=3:10)
knnFit <- train(label ~ ., data = train_5000, method = "knn", trControl = ctrl, tuneGrid=grid)
knnFit
grid <- expand.grid(k=2:4)
knnFit <- train(label ~ ., data = train_5000, method = "knn", trControl = ctrl, tuneGrid=grid)
knnFit
knnFit <- train(label ~ ., data = train, method = "knn", k = 3)
warnings()
knnFit <- train(label ~ ., data = train, method = "knn", trControl = NULL, tuneGrid=c(3))
test_pca <- predict(pr.out)
test <- as.data.frame(test_pca)
knnFit <- knn3(label ~ ., data = train, k = 3)
knnFit
library(class)
dim(test_pca)
rm(list = ls())
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train_nzv <- train[, !zero_var_col$nzv]
test_nzv <- test[, !zero_var_col$nzv]
rm(train)
rm(test)
pr.out=prcomp(train_nzv[, -1], scale=TRUE, center = T)
train_pca <- predict(pr.out)
train <- as.data.frame(cbind(train_nzv$label, train_pca))
rm(train_pca)
rm(train_nzv)
colnames(train)[1]<- "label"
train$label <- as.factor(train$label)
test_pca <- predict(pr.out, test_nzv)
test <- as.data.frame(cbind(test_nzv$label, test_pca))
rm(test_nzv)
rm(test_pca)
prediction <- knn(train, test, train$label, k=3)
table(test$V1, prediction)
diag(table(test$V1, prediction))
sum(diag(table(test$V1, prediction)))/nrow(test)
predknn <- knn3(label ~ ., data = train, k = 3)
predknn
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 20)
train_1000 <- train[sample(nrow(train), size = 1000),]
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 20)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 20)
install.packages("doMC")
ap <- available.packages()
names(ap)
head(ap)
class(ap)
fix(ap)
library(doParallel)
getDoParWorkers()
cl <- makeCluster(2)
registerDoParallel(2)
getDoParWorkers()
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 5)
grid <- expand.grid(k=2:4)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl, tuneGrid=grid)
grid <- expand.grid(mtry=2:4)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl, tuneGrid=grid)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 3)
train <- train[, 1:71]
test <- test[, 1:71]
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 3)
train_1000 <- train[sample(nrow(train), size = 1000),]
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 3)
rm(list = ls())
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
getDoParWorkers()
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
pr.out=prcomp(train[, -1], scale=TRUE, center = T)
train_pca <- predict(pr.out)
train <- as.data.frame(cbind(train$label, train_pca))
rm(train_pca)
colnames(train)[1]<- "label"
train$label <- as.factor(train$label)
test_pca <- predict(pr.out, test)
test <- as.data.frame(cbind(test$label, test_pca))
rm(test_pca)
train <- train[, 1:71]
test <- test[, 1:71]
train_1000 <- train[sample(nrow(train), size = 1000),]
ctrl <- trainControl(method="repeatedcv",repeats = 3)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneLength = 3)
rfFit
grid <- expand.grid(mtry=2:4)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(mtry=3:5)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(.mtry=3:5)
rfFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneGrid=grid)
install.packages("curl")
getDoParName()
getDoParVersion()
getDoParWorkers()
stopCluster(cl)
stopImplicitCluster()
getDoParWorkers()
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
getDoParWorkers()
stopCluster(cl)
getDoParWorkers()
stopImplicitCluster
stopImplicitCluster()
getDoParWorkers()
stopImplicitCluster(cl)
rm(list = ls())
library(readr)
library(caret)
library("doParallel", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("dplyr", lib.loc="C:/Program Files/R/R-3.2.2/library")
data_train <- read_csv("train.csv")
getDoParWorkers()
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
pr.out=prcomp(train[, -1], scale=TRUE, center = T)
train_pca <- predict(pr.out)
train <- as.data.frame(cbind(train$label, train_pca))
rm(train_pca)
colnames(train)[1]<- "label"
train$label <- as.factor(train$label)
test_pca <- predict(pr.out, test)
test <- as.data.frame(cbind(test$label, test_pca))
rm(test_pca)
train <- train[, 1:71]
test <- test[, 1:71]
train_1000 <- train[sample(nrow(train), size = 1000),]
ctrl <- trainControl(method="repeatedcv",repeats = 3)
grid <- expand.grid(mtry=2:4)
fFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneGrid=grid)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
getDoParWorkers()
fFit <- train(label ~ ., data = train_1000, method = "rf", trControl = ctrl,tuneGrid=grid)
fFit
stopCluster(cl)
library(randomForest)
rfFit <- randomForest(label ~ ., data = train, mtry = 3)
rfFit <- randomForest(label ~ ., data = train[sample(nrow(train), size = 20000),], mtry = 3)
rfFit <- randomForest(label ~ ., data = train[sample(nrow(train), size = 15000),], mtry = 3)
rfFit
RFTestPredictions<-predict(rfFit,test)
table(test$V1, RFTestPredictions)
sum(diag(table(test$V1, RFTestPredictions)))/nrow(test)
library(readr)
library(caret)
library(dplyr)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
getDoParWorkers()
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
pr.out=prcomp(train[, -1], scale=TRUE, center = T)
train_pca <- predict(pr.out)
train <- as.data.frame(cbind(train$label, train_pca))
rm(train_pca)
colnames(train)[1]<- "label"
train$label <- as.factor(train$label)
test_pca <- predict(pr.out, test)
test <- as.data.frame(cbind(test$label, test_pca))
rm(test_pca)
train <- train[, 1:71]
test <- test[, 1:71]
train_1000 <- train[sample(nrow(train), size = 1000),]
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneLength = 3)
svmFit
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneLength = 5)
svmFit
grid <- expand.grid(C=4:10)
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(C=4:10, sigma = seq(0.1, 0.5, 0.1))
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(C=4:6, sigma = seq(0.1, 0.2, 0.1))
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(C=4:6, sigma = seq(0.1, 0.3, 0.1))
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
svmFit
grid <- expand.grid(C=4:6, sigma = seq(0.006, 0.008, 0.001))
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
grid <- expand.grid(C=4:6, sigma = seq(0.006, 0.009, 0.001))
svmFit <- train(label ~ ., data = train_1000, method = "svmRadial", trControl = ctrl,tuneGrid=grid)
svmFit
library("e1071")
library("kernlab", lib.loc="C:/Program Files/R/R-3.2.2/library")
svmFit <- ksvm(label ~ ., data = train,type="C-svc",kernel="rbfdot",kpar=list(sigma=0.009),C=4)
svmFit
prediction_svm <- predict(svmFit, newdata = test)
table(test$V1, prediction_svm)
sum(diag(table(test$V1, prediction_svm)))/nrow(test)
plot(svmFit, data=train)
rm(list = ls())
data_train <- read_csv("train.csv")
train <- data_train[sample(nrow(data_train), size = 1000),]
library(ggplot2)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train_nzv <- train[, !zero_var_col$nzv]
ggplot(data = train_nzv, aes(x = pixel125, y = pixel126, color = factor(label))) + geom_point()
train <- data_train[sample(nrow(data_train), size = 1000),]
ggplot(data = train_nzv, aes(x = pixel125, y = pixel126, color = factor(label))) + geom_point()
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
ggplot(data = train, aes(x = pixel125, y = pixel126, color = factor(label))) + geom_point()
ggplot(data = train, aes(x = pixel152, y = pixel153, color = factor(label))) + geom_point()
library(rgl)
pr.out=prcomp(train[, -1], scale=TRUE, center = T)
variance <- pr.out$sdev^2/sum(pr.out$sdev^2)
cumvar <- cumsum(variance)
cumvar <- data.frame(PC = 1:251, CumVar = cumvar)
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_point()
sum(variance[1:70])
variance <- data.frame(PC = 1:251, Var = variance*100)
ggplot(data = variance[1:10,], aes(x = factor(PC), y = Var)) + geom_bar(stat = "identity")
library(ggbiplot)
g <- ggbiplot(pr.out, obs.scale = 1, var.scale = 1, groups = factor(train_nzv[, 1]), ellipse = TRUE, circle = F, var.axes = F)
g <- ggbiplot(pr.out, obs.scale = 1, var.scale = 1, groups = factor(train[, 1]), ellipse = TRUE, circle = F, var.axes = F)
rm(list = ls())
data_train <- read_csv("train.csv")
data_train <- read_csv("train.csv")
library(readr)
library(caret)
library(ggbiplot)
library(ggplot2)
library(dplyr)
library(rgl)
data_train <- read_csv("train.csv")
set.seed(111)
split <- createDataPartition(data_train$label, p = 0.6, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
zero_var_col <- nearZeroVar(train, saveMetrics = T)
train <- train[, !zero_var_col$nzv]
test <- test[, !zero_var_col$nzv]
dim(train)
train_1000 <- train[sample(nrow(train), size = 1000),]
pc <- princomp(train[, -1], cor=TRUE, scores=TRUE)
variance <- pc$sdev^2/sum(pc$sdev^2)
cumvar <- cumsum(variance)
cumvar <- data.frame(PC = 1:252, CumVar = cumvar)
ggplot(data = cumvar, aes(x = PC, y = CumVar)) + geom_point()
variance <- data.frame(PC = 1:299, Var = variance*100)
variance <- data.frame(PC = 1:252, Var = variance*100)
ggplot(data = variance[1:10,], aes(x = factor(PC), y = Var)) + geom_bar(stat = "identity")
sum(variance$Var[1:70])
sum(variance$Var[1:65])
library(magrittr)
train <- predict(pr.out) %>% as.data.frame(cbind(train$label, .))
train <- predict(pc) %>% as.data.frame(cbind(train$label, .))
train <- slice(data_train, split)
train <- train[, !zero_var_col$nzv]
train <- (predict(pc) %>% as.data.frame(cbind(train$label, .)))
train <- predict(pc) %>% cbind(train$label, .) %>% as.data.frame(.)
train <- slice(data_train, split)
train <- train[, !zero_var_col$nzv]
train <- predict(pc) %>% cbind(train$label, .) %>% as.data.frame(.)
train <- slice(data_train, split)
train <- train[, !zero_var_col$nzv]
train <- predict(pc) %>% cbind(train$label, .) %>% as.data.frame(.)
train <- slice(data_train, split)
train <- train[, !zero_var_col$nzv]
train <- predict(pc) %>% cbind(train$label, .) %>% as.data.frame(.) %>% select(1:71)
train %<>% predict(pc, .) %>% cbind(test$label, .) %>% as.data.frame(.) %>% select(1:71)
test %<>% predict(pc, .) %>% cbind(test$label, .) %>% as.data.frame(.) %>% select(1:71)
library("doParallel", lib.loc="C:/Program Files/R/R-3.2.2/library")
getDoParWorkers()
library("doParallel")
getDoParWorkers()
which.max(c(1,2,3))
which.max(c(1,1,1))
c(6,6,5) %>% table(.) %>% which.max(.) %>% names(.) %>% as.numeric(.)
library(magrittr)
c(6,6,5) %>% table(.) %>% which.max(.) %>% names(.) %>% as.numeric(.)
c(6,6,6) %>% table(.) %>% which.max(.) %>% names(.) %>% as.numeric(.)
c(6,7,8) %>% table(.) %>% which.max(.) %>% names(.) %>% as.numeric(.)
data_test <- read_csv("test.csv")
library(readr)
data_test <- read_csv("test.csv")
zero_var_col <- nearZeroVar(data_train, saveMetrics = T)
library(caret)
zero_var_col <- nearZeroVar(data_train, saveMetrics = T)
data_train <- data_train[, !zero_var_col$nzv]
data_test <- data_test[, !zero_var_col$nzv]
data_test <- read_csv("test.csv")
data_train <- read_csv("train.csv")
zero_var_col <- nearZeroVar(data_train, saveMetrics = T)
zero_var_col$nzv
zero_var_col <- nearZeroVar(data_train[, -1], saveMetrics = T)
data_train <- data_train[, !zero_var_col$nzv]
data_test <- data_test[, !zero_var_col$nzv]
zero_var_col$nzv
data_test <- read_csv("test.csv")
data_train <- read_csv("train.csv")
label <- data_train$label
data_train <- data_train[, -1]
zero_var_col <- nearZeroVar(data_train, saveMetrics = T)
data_train <- data_train[, !zero_var_col$nzv]
data_test <- data_test[, !zero_var_col$nzv]
pc <- princomp(data_train, cor=TRUE, scores=TRUE)
data_train <- predict(pc) %>% cbind(label, .) %>% as.data.frame(.) %>% select(1:71)
library(dplyr)
data_train <- predict(pc) %>% cbind(label, .) %>% as.data.frame(.) %>% select(1:71)
data_train$label <- as.factor(data_train$label)
data_test %<>% predict(pc, .) %>% as.data.frame(.) %>% select(1:70)
rm(test, train, train_1000)
library(class)
prediction_knn <- knn(data_train, data_test, data_train$label, k=3)
data_test <- read_csv("test.csv")
data_train <- read_csv("train.csv")
label <- data_train$label
data_train <- data_train[, -1]
zero_var_col <- nearZeroVar(data_train, saveMetrics = T)
data_train <- data_train[, !zero_var_col$nzv]
data_test <- data_test[, !zero_var_col$nzv]
pc <- princomp(data_train, cor=TRUE, scores=TRUE)
data_train <- predict(pc) %>% cbind(label, .) %>% as.data.frame(.) %>% select(1:71)
data_train$label <- as.factor(data_train$label)
data_test %<>% predict(pc, .) %>% as.data.frame(.) %>% select(1:70)
label <- data_train$label
data_train <- data_train[, -1]
prediction_knn <- knn(data_train, data_test, label, k=3)
library(randomForest)
rfFit <- randomForest(label ~ ., data = data_train, mtry = 4)
data_train <- data_train %>% cbind(label, .) %>% as.data.frame(.)
rfFit <- randomForest(label ~ ., data = data_train, mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(train), size = 30000),], mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(data_train), size = 30000),], mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(data_train), size = 25000),], mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(data_train), size = 20000),], mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(data_train), size = 15000),], mtry = 4)
rfFit <- randomForest(label ~ ., data = data_train[sample(nrow(data_train), size = 10000),], mtry = 4)
prediction_rf<-predict(rfFit,data_test)
library(kernlab)
svmFit <- ksvm(label ~ ., data = data_train,type="C-svc",kernel="rbfdot",kpar=list(sigma=0.008),C=4)
rm(rfFit)
svmFit <- ksvm(label ~ ., data = data_train,type="C-svc",kernel="rbfdot",kpar=list(sigma=0.008),C=4)
prediction_svm <- predict(svmFit, newdata = data_test)
all_prediction <- cbind(as.numeric(levels(prediction_knn))[prediction_knn],
as.numeric(levels(prediction_rf))[prediction_rf],
as.numeric(levels(prediction_svm))[prediction_svm])
predictions_ensemble <- apply(all_prediction, 1, function(row) {
row %>% table(.) %>% which.max(.) %>% names(.) %>% as.numeric(.)
})
predictions <- data.frame(ImageId=1:nrow(data_test), Label=predictions_ensemble)
write_csv(predictions, "ensemble.csv")
predictions <- data.frame(ImageId=1:nrow(data_test), Label=all_prediction[,1])
write_csv(predictions, "knn.csv")
predictions <- data.frame(ImageId=1:nrow(data_test), Label=all_prediction[,2])
write_csv(predictions, "rf.csv")
predictions <- data.frame(ImageId=1:nrow(data_test), Label=all_prediction[,3])
write_csv(predictions, "svm.csv")
rm(list = ls())
